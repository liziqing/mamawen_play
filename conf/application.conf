# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="k:IRpSpIHl^_YY31bwQLOGM6RV:@Hphg`NtO_P6wlZ]lCsfGIcJIWq]ZF[V`j/Ug"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
#

db.default.hikaricp.file="conf/hikaricp.properties"
db.default.jndiName=DefaultDS
applyEvolutions.default=true
dbplugin=disabled
# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

jpa.default=default
xmpp.address=10.131.134.11
#xmpp.address=127.0.0.1
xmpp.port=5222
xmpp.server=182.254.222.156
#xmpp.server=ronald-pc
reminder.sender.count=10
sms.sender.count=10
aes.key = ma2new_app

im.sender.count=2
im.sender.jidstart=1
push.doctor.appid=gezPgAzgQ4A2LuzdyApzZ8
push.doctor.appkey=OJ7QnLmGrh8vC2aC7aCO39
push.doctor.master=JmOaCkPYnkAlnnfOFycuoA
push.user.appid=WBz5vYHmPQALr8RHTMFJg8
push.user.appkey=KYRiSD4pRX8zoJ3Vfs1pM4
push.user.master=I4VSwTHA1i5fFpxJCtvZ0A
# Configure our user-code thread pool to something similar to servlets
play {
  akka {
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 200
        }
      }
    }
  }
}
